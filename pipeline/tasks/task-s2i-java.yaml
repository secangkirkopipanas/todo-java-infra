apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: s2i-java
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.19"
    tekton.dev/tags: s2i, java, workspace
    tekton.dev/displayName: "s2i java"
spec:
  description: >-
    s2i-java task clones a Git repository and builds and pushes a container
    image using S2I and a Java builder image.
  params:
    - name: VERSION
      default: latest
      description: The tag of java imagestream for java version
      type: string
    - name: PATH_CONTEXT
      default: .
      description: The location of the path to run s2i from
      type: string
    - name: TLSVERIFY
      default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      type: string
    - name: IMAGE
      description: Location of the repo where image has to be pushed
      type: string
    - name: GIT_COMMIT_ID
      description: Git commit ID
      type: string
    - name: BUILDER_IMAGE
      default: >-
        registry.redhat.io/rhel8/buildah@sha256:00795fafdab9bbaa22cd29d1faa1a01e604e4884a2c935c1bf8e3d1f0ad1c084
      description: The location of the buildah builder image.
      type: string
    - name: SKIP_PUSH
      default: 'false'
      description: Skip pushing the built image
      type: string
    - name: ENV_VARS
      default: []
      description: Environment variables to set during _build-time_.
      type: array
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
      type: string
  steps:
    - args:
        - '$(params.ENV_VARS[*])'
      env:
        - name: HOME
          value: /tekton/home
      image: >-
        registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8@sha256:e01c89619a7c6a26d1f2d98acb9f8356a1f70dcd352ce450a4e80ea5d7489439
      name: generate
      script: |
        #!/usr/bin/env bash
        set +x
        
        printf -- "-------------------------------------------------\n"
        printf    " Processing Build Environment Variables          \n"
        printf -- "-------------------------------------------------\n\n"

        s2i build $(params.PATH_CONTEXT) \
        image-registry.openshift-image-registry.svc:5000/openshift/java:$(params.VERSION) \
        --image-scripts-url image:///usr/local/s2i \
        --as-dockerfile /gen-source/Dockerfile.gen
      volumeMounts:
        - mountPath: /gen-source
          name: gen-source
        - mountPath: /env-vars
          name: env-vars
      workingDir: $(workspaces.source.path)/target
    - image: $(params.BUILDER_IMAGE)
      name: build-and-push
      env:
        - name: QUAY_IO_USERNAME
          valueFrom:
            secretKeyRef:
              name: container-registry-secret
              key: "username"
        - name: QUAY_IO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: container-registry-secret
              key: "password"
      script: |
        #!/usr/bin/env bash
        set +x

        printf -- "---------------------------------------------------\n"
        printf    " Building Container Image and Push to Registry     \n"
        printf -- "---------------------------------------------------\n\n"

        echo "$QUAY_IO_PASSWORD" | buildah login --username "$QUAY_IO_USERNAME" --password-stdin quay.io

        TAG_NAME="$(params.GIT_COMMIT_ID)"
        if [ ${#TAG_NAME} -gt 30 ]; then
          TAG_NAME="${TAG_NAME:0:10}"
        fi
        echo "Image name: $(params.IMAGE):$TAG_NAME"

        buildah bud --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
          --layers -f /gen-source/Dockerfile.gen -t $(params.IMAGE):$TAG_NAME .

        [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0

        [[ "$(workspaces.dockerconfig.bound)" == "true" ]] && export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

        buildah push --storage-driver=vfs --tls-verify=$(params.TLSVERIFY) \
          --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE):$TAG_NAME \
          docker://$(params.IMAGE):$TAG_NAME

        rm -f $(workspaces.infra-repo.path)/image.env
        echo "IMAGE_NAME=$(params.IMAGE)" >> $(workspaces.infra-repo.path)/image.env
        echo "TAG_NAME=$TAG_NAME" >> $(workspaces.infra-repo.path)/image.env

        cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
        - mountPath: /gen-source
          name: gen-source
      workingDir: /gen-source
  volumes:
    - emptyDir: {}
      name: varlibcontainers
    - emptyDir: {}
      name: gen-source
    - emptyDir: {}
      name: env-vars
  workspaces:
    - name: source
    - description: >-
        An optional workspace that allows providing a .docker/config.json file
        for Buildah to access the container registry. The file should be placed
        at the root of the Workspace with name config.json.
      name: dockerconfig
      optional: true
    - name: maven-local-repo
      mountPath: /tmp/maven-repo
    - name: infra-repo